# Production optimized Dockerfile following ElizaOS framework structure
FROM oven/bun:1.2-alpine AS base

# Install system dependencies for native modules and runtime
RUN apk add --no-cache \
    build-base \
    curl \
    ffmpeg \
    git \
    make \
    python3 \
    g++ \
    pkgconfig \
    cairo-dev \
    pango-dev \
    jpeg-dev \
    giflib-dev \
    librsvg-dev \
    unzip

WORKDIR /app

# Builder stage - install all dependencies and build
FROM base AS builder

# Copy workspace configuration files first for better layer caching
COPY package.json bun.lock bunfig.toml ./
COPY tsconfig.json tsup.config.ts ./

# Copy plugin package.json and tsconfig files for workspace dependency resolution
COPY plugins/plugin-akash-chat/package.json plugins/plugin-akash-chat/tsconfig.json ./plugins/plugin-akash-chat/
COPY plugins/plugin-discord/package.json plugins/plugin-discord/tsconfig.json ./plugins/plugin-discord/
COPY plugins/plugin-knowledge/package.json plugins/plugin-knowledge/tsconfig.json ./plugins/plugin-knowledge/
COPY plugins/plugin-web-search/package.json plugins/plugin-web-search/tsconfig.json ./plugins/plugin-web-search/

# Install all dependencies (including devDependencies for build)
RUN bun install --frozen-lockfile

# Copy source code
COPY src ./src
COPY plugins ./plugins

# Build all plugins and main app
RUN bun run build

# Production runtime stage
FROM oven/bun:1.2-alpine AS runner
WORKDIR /app

# Install only runtime dependencies (no build tools)
RUN apk add --no-cache \
    dumb-init \
    curl \
    ffmpeg \
    git \
    python3 \
    unzip

# Create non-root user (following ElizaOS naming convention)
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 eliza

# Copy package.json and workspace configuration for runtime
COPY --from=builder --chown=eliza:nodejs /app/package.json ./
COPY --from=builder --chown=eliza:nodejs /app/bunfig.toml ./

# Copy plugin package.json files for workspace resolution
COPY --from=builder --chown=eliza:nodejs /app/plugins/plugin-akash-chat/package.json ./plugins/plugin-akash-chat/
COPY --from=builder --chown=eliza:nodejs /app/plugins/plugin-discord/package.json ./plugins/plugin-discord/
COPY --from=builder --chown=eliza:nodejs /app/plugins/plugin-knowledge/package.json ./plugins/plugin-knowledge/
COPY --from=builder --chown=eliza:nodejs /app/plugins/plugin-web-search/package.json ./plugins/plugin-web-search/

# Install only production dependencies in runtime
RUN bun install --frozen-lockfile --production

# Copy built assets from builder
COPY --from=builder --chown=eliza:nodejs /app/dist ./dist
COPY --from=builder --chown=eliza:nodejs /app/plugins/plugin-akash-chat/dist ./plugins/plugin-akash-chat/dist
COPY --from=builder --chown=eliza:nodejs /app/plugins/plugin-discord/dist ./plugins/plugin-discord/dist
COPY --from=builder --chown=eliza:nodejs /app/plugins/plugin-knowledge/dist ./plugins/plugin-knowledge/dist
COPY --from=builder --chown=eliza:nodejs /app/plugins/plugin-web-search/dist ./plugins/plugin-web-search/dist

# Copy .env file if it exists (use default .env.example if not provided at build time)
COPY .env.example .env* ./

# Copy data directory
COPY --chown=eliza:nodejs data ./data

USER eliza

EXPOSE 3000
EXPOSE 50000-50100/udp

ENV NODE_ENV=production
ENV PORT=3000
ENV BUN_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Use dumb-init for proper signal handling (following ElizaOS pattern)
ENTRYPOINT ["dumb-init", "--"]
# Add more verbose logging to debug startup issues
CMD ["sh", "-c", "ls -la && echo 'ENV:' && env | sort && echo 'Starting application...' && bun start || (echo 'Startup failed! Error code: $?' && sleep 10)"]
